---
- name: Download nodejs ppa installer
      get_url: 
        url: https://deb.nodesource.com/setup_8.x 
        dest: /tmp/nodejs-installer.sh
        mode: 0755


- name: Execute nodejs ppa installer
  shell: /tmp/nodejs-installer.sh


- name: Remove nodejs ppa installer
  file: 
    path: /tmp/nodejs-installer.sh 
    state: absent


- name: Install NodeJS
  apt:
    name: "{{ packages }}"
    allow_unauthenticated: yes
  vars:
    packages:
    - nodejs


- name: Ensure python 3 packages for Jupyter are installed
      pip:
        name: "{{ packages }}"
        executable: pip3
      vars:
        packages:
        - jupyterlab==0.35.0
        - jupyterhub==0.9.4
        - virtualenv==16.0.0


- name: Ensure configurable-http-proxy is installed
  npm:
    global: yes
    name: configurable-http-proxy


- name: Ensure Jupyter configuration directory exists
  file:
    path: /etc/jupyterhub/
    state: directory


- name: Ensure systemd directory exists
  file:
    path: /usr/lib/systemd/system
    state: directory


- name: Create nginx location block
  when: PLUGIN_NGINX_ENABLED is defined and (PLUGIN_NGINX_ENABLED | bool)
  register: nginx_config
  copy:
    dest: /etc/nginx/app-location-conf.d/jupyterhub.conf
    mode: 0644
    content: |
      location / {
          proxy_pass http://127.0.0.1:8000;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header Host $host;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $connection_upgrade;
      }


- name: Restart nginx
  when: nginx_config is not skipped
  service:
    name: nginx
    state: restarted


- name: Ensure port 8000 is allowed
  when: PLUGIN_NGINX_ENABLED is not defined or not (PLUGIN_NGINX_ENABLED | bool)
  ufw:
    rule: allow
    port: 8000


- name: Ensure jupyter configuration is in place
      copy:
        dest: /etc/jupyterhub/jupyterhub_config.py
        content: |
          c.Spawner.default_url = '/lab'
          c.Spawner.notebook_dir = '~'
          c.PAMAuthenticator.admin_groups = {'wheel'}


- name: Ensure jupyter systemd config is in place
  copy:
    dest: /usr/lib/systemd/system/jupyterhub.service
    content: |
      [Unit]
      Description=Jypyter Hub daemon
      After=network.target

      [Service]
      Type=simple
      ExecStart=/usr/local/bin/jupyterhub --config=/etc/jupyterhub/jupyterhub_config.py
      Restart=on-failure
      RestartSec=42s

      [Install]
      WantedBy=multi-user.target

- name: Ensure Jupyterhub is started
    register: start_jupyterhub
    service:
      name: jupyterhub
      state: restarted
      enabled: yes


- debug:
    msg: 'service_url: {"url": "http://{{ ansible_host }}:8000", "tag": "web", "description": "Jupyter"}'
  when: (start_jupyterhub is succeeded) and (nginx_config is skipped)

- debug:
    msg: 'service_url: {"url": "https://{{ ansible_host }}", "tag": "web", "description": "Jupyter"}'
  when: (start_jupyterhub is succeeded) and (nginx_config is not skipped)
